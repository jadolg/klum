/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/jadolg/klum/pkg/apis/klum.cattle.io/v1alpha1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type UserSyncHandler func(string, *v1alpha1.UserSync) (*v1alpha1.UserSync, error)

type UserSyncController interface {
	generic.ControllerMeta
	UserSyncClient

	OnChange(ctx context.Context, name string, sync UserSyncHandler)
	OnRemove(ctx context.Context, name string, sync UserSyncHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() UserSyncCache
}

type UserSyncClient interface {
	Create(*v1alpha1.UserSync) (*v1alpha1.UserSync, error)
	Update(*v1alpha1.UserSync) (*v1alpha1.UserSync, error)
	UpdateStatus(*v1alpha1.UserSync) (*v1alpha1.UserSync, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1alpha1.UserSync, error)
	List(opts metav1.ListOptions) (*v1alpha1.UserSyncList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.UserSync, err error)
}

type UserSyncCache interface {
	Get(name string) (*v1alpha1.UserSync, error)
	List(selector labels.Selector) ([]*v1alpha1.UserSync, error)

	AddIndexer(indexName string, indexer UserSyncIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.UserSync, error)
}

type UserSyncIndexer func(obj *v1alpha1.UserSync) ([]string, error)

type userSyncController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewUserSyncController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) UserSyncController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &userSyncController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromUserSyncHandlerToHandler(sync UserSyncHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.UserSync
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.UserSync))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *userSyncController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.UserSync))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateUserSyncDeepCopyOnChange(client UserSyncClient, obj *v1alpha1.UserSync, handler func(obj *v1alpha1.UserSync) (*v1alpha1.UserSync, error)) (*v1alpha1.UserSync, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *userSyncController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *userSyncController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *userSyncController) OnChange(ctx context.Context, name string, sync UserSyncHandler) {
	c.AddGenericHandler(ctx, name, FromUserSyncHandlerToHandler(sync))
}

func (c *userSyncController) OnRemove(ctx context.Context, name string, sync UserSyncHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromUserSyncHandlerToHandler(sync)))
}

func (c *userSyncController) Enqueue(name string) {
	c.controller.Enqueue("", name)
}

func (c *userSyncController) EnqueueAfter(name string, duration time.Duration) {
	c.controller.EnqueueAfter("", name, duration)
}

func (c *userSyncController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *userSyncController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *userSyncController) Cache() UserSyncCache {
	return &userSyncCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *userSyncController) Create(obj *v1alpha1.UserSync) (*v1alpha1.UserSync, error) {
	result := &v1alpha1.UserSync{}
	return result, c.client.Create(context.TODO(), "", obj, result, metav1.CreateOptions{})
}

func (c *userSyncController) Update(obj *v1alpha1.UserSync) (*v1alpha1.UserSync, error) {
	result := &v1alpha1.UserSync{}
	return result, c.client.Update(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *userSyncController) UpdateStatus(obj *v1alpha1.UserSync) (*v1alpha1.UserSync, error) {
	result := &v1alpha1.UserSync{}
	return result, c.client.UpdateStatus(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *userSyncController) Delete(name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), "", name, *options)
}

func (c *userSyncController) Get(name string, options metav1.GetOptions) (*v1alpha1.UserSync, error) {
	result := &v1alpha1.UserSync{}
	return result, c.client.Get(context.TODO(), "", name, result, options)
}

func (c *userSyncController) List(opts metav1.ListOptions) (*v1alpha1.UserSyncList, error) {
	result := &v1alpha1.UserSyncList{}
	return result, c.client.List(context.TODO(), "", result, opts)
}

func (c *userSyncController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), "", opts)
}

func (c *userSyncController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1.UserSync, error) {
	result := &v1alpha1.UserSync{}
	return result, c.client.Patch(context.TODO(), "", name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type userSyncCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *userSyncCache) Get(name string) (*v1alpha1.UserSync, error) {
	obj, exists, err := c.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1alpha1.UserSync), nil
}

func (c *userSyncCache) List(selector labels.Selector) (ret []*v1alpha1.UserSync, err error) {

	err = cache.ListAll(c.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserSync))
	})

	return ret, err
}

func (c *userSyncCache) AddIndexer(indexName string, indexer UserSyncIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.UserSync))
		},
	}))
}

func (c *userSyncCache) GetByIndex(indexName, key string) (result []*v1alpha1.UserSync, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1alpha1.UserSync, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.UserSync))
	}
	return result, nil
}

type UserSyncStatusHandler func(obj *v1alpha1.UserSync, status v1alpha1.UserSyncStatus) (v1alpha1.UserSyncStatus, error)

type UserSyncGeneratingHandler func(obj *v1alpha1.UserSync, status v1alpha1.UserSyncStatus) ([]runtime.Object, v1alpha1.UserSyncStatus, error)

func RegisterUserSyncStatusHandler(ctx context.Context, controller UserSyncController, condition condition.Cond, name string, handler UserSyncStatusHandler) {
	statusHandler := &userSyncStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromUserSyncHandlerToHandler(statusHandler.sync))
}

func RegisterUserSyncGeneratingHandler(ctx context.Context, controller UserSyncController, apply apply.Apply,
	condition condition.Cond, name string, handler UserSyncGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &userSyncGeneratingHandler{
		UserSyncGeneratingHandler: handler,
		apply:                     apply,
		name:                      name,
		gvk:                       controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterUserSyncStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type userSyncStatusHandler struct {
	client    UserSyncClient
	condition condition.Cond
	handler   UserSyncStatusHandler
}

func (a *userSyncStatusHandler) sync(key string, obj *v1alpha1.UserSync) (*v1alpha1.UserSync, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type userSyncGeneratingHandler struct {
	UserSyncGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *userSyncGeneratingHandler) Remove(key string, obj *v1alpha1.UserSync) (*v1alpha1.UserSync, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1alpha1.UserSync{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *userSyncGeneratingHandler) Handle(obj *v1alpha1.UserSync, status v1alpha1.UserSyncStatus) (v1alpha1.UserSyncStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.UserSyncGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
