/*
Copyright 2024 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"sync"
	"time"

	v1alpha1 "github.com/jadolg/klum/pkg/apis/klum.cattle.io/v1alpha1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type UserHandler func(string, *v1alpha1.User) (*v1alpha1.User, error)

type UserController interface {
	generic.ControllerMeta
	UserClient

	OnChange(ctx context.Context, name string, sync UserHandler)
	OnRemove(ctx context.Context, name string, sync UserHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() UserCache
}

type UserClient interface {
	Create(*v1alpha1.User) (*v1alpha1.User, error)
	Update(*v1alpha1.User) (*v1alpha1.User, error)
	UpdateStatus(*v1alpha1.User) (*v1alpha1.User, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1alpha1.User, error)
	List(opts metav1.ListOptions) (*v1alpha1.UserList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.User, err error)
}

type UserCache interface {
	Get(name string) (*v1alpha1.User, error)
	List(selector labels.Selector) ([]*v1alpha1.User, error)

	AddIndexer(indexName string, indexer UserIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.User, error)
}

type UserIndexer func(obj *v1alpha1.User) ([]string, error)

type userController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewUserController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) UserController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &userController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromUserHandlerToHandler(sync UserHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.User
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.User))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *userController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.User))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateUserDeepCopyOnChange(client UserClient, obj *v1alpha1.User, handler func(obj *v1alpha1.User) (*v1alpha1.User, error)) (*v1alpha1.User, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *userController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *userController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *userController) OnChange(ctx context.Context, name string, sync UserHandler) {
	c.AddGenericHandler(ctx, name, FromUserHandlerToHandler(sync))
}

func (c *userController) OnRemove(ctx context.Context, name string, sync UserHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromUserHandlerToHandler(sync)))
}

func (c *userController) Enqueue(name string) {
	c.controller.Enqueue("", name)
}

func (c *userController) EnqueueAfter(name string, duration time.Duration) {
	c.controller.EnqueueAfter("", name, duration)
}

func (c *userController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *userController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *userController) Cache() UserCache {
	return &userCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *userController) Create(obj *v1alpha1.User) (*v1alpha1.User, error) {
	result := &v1alpha1.User{}
	return result, c.client.Create(context.TODO(), "", obj, result, metav1.CreateOptions{})
}

func (c *userController) Update(obj *v1alpha1.User) (*v1alpha1.User, error) {
	result := &v1alpha1.User{}
	return result, c.client.Update(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *userController) UpdateStatus(obj *v1alpha1.User) (*v1alpha1.User, error) {
	result := &v1alpha1.User{}
	return result, c.client.UpdateStatus(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *userController) Delete(name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), "", name, *options)
}

func (c *userController) Get(name string, options metav1.GetOptions) (*v1alpha1.User, error) {
	result := &v1alpha1.User{}
	return result, c.client.Get(context.TODO(), "", name, result, options)
}

func (c *userController) List(opts metav1.ListOptions) (*v1alpha1.UserList, error) {
	result := &v1alpha1.UserList{}
	return result, c.client.List(context.TODO(), "", result, opts)
}

func (c *userController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), "", opts)
}

func (c *userController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1.User, error) {
	result := &v1alpha1.User{}
	return result, c.client.Patch(context.TODO(), "", name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type userCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *userCache) Get(name string) (*v1alpha1.User, error) {
	obj, exists, err := c.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1alpha1.User), nil
}

func (c *userCache) List(selector labels.Selector) (ret []*v1alpha1.User, err error) {

	err = cache.ListAll(c.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.User))
	})

	return ret, err
}

func (c *userCache) AddIndexer(indexName string, indexer UserIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.User))
		},
	}))
}

func (c *userCache) GetByIndex(indexName, key string) (result []*v1alpha1.User, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1alpha1.User, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.User))
	}
	return result, nil
}

// UserStatusHandler is executed for every added or modified User. Should return the new status to be updated
type UserStatusHandler func(obj *v1alpha1.User, status v1alpha1.UserStatus) (v1alpha1.UserStatus, error)

// UserGeneratingHandler is the top-level handler that is executed for every User event. It extends UserStatusHandler by a returning a slice of child objects to be passed to apply.Apply
type UserGeneratingHandler func(obj *v1alpha1.User, status v1alpha1.UserStatus) ([]runtime.Object, v1alpha1.UserStatus, error)

// RegisterUserStatusHandler configures a UserController to execute a UserStatusHandler for every events observed.
// If a non-empty condition is provided, it will be updated in the status conditions for every handler execution
func RegisterUserStatusHandler(ctx context.Context, controller UserController, condition condition.Cond, name string, handler UserStatusHandler) {
	statusHandler := &userStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromUserHandlerToHandler(statusHandler.sync))
}

// RegisterUserGeneratingHandler configures a UserController to execute a UserGeneratingHandler for every events observed, passing the returned objects to the provided apply.Apply.
// If a non-empty condition is provided, it will be updated in the status conditions for every handler execution
func RegisterUserGeneratingHandler(ctx context.Context, controller UserController, apply apply.Apply,
	condition condition.Cond, name string, handler UserGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &userGeneratingHandler{
		UserGeneratingHandler: handler,
		apply:                 apply,
		name:                  name,
		gvk:                   controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterUserStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type userStatusHandler struct {
	client    UserClient
	condition condition.Cond
	handler   UserStatusHandler
}

// sync is executed on every resource addition or modification. Executes the configured handlers and sends the updated status to the Kubernetes API
func (a *userStatusHandler) sync(key string, obj *v1alpha1.User) (*v1alpha1.User, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type userGeneratingHandler struct {
	UserGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
	seen  sync.Map
}

// Remove handles the observed deletion of a resource, cascade deleting every associated resource previously applied
func (a *userGeneratingHandler) Remove(key string, obj *v1alpha1.User) (*v1alpha1.User, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1alpha1.User{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	if a.opts.UniqueApplyForResourceVersion {
		a.seen.Delete(key)
	}

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

// Handle executes the configured UserGeneratingHandler and pass the resulting objects to apply.Apply, finally returning the new status of the resource
func (a *userGeneratingHandler) Handle(obj *v1alpha1.User, status v1alpha1.UserStatus) (v1alpha1.UserStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.UserGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}
	if !a.isNewResourceVersion(obj) {
		return newStatus, nil
	}

	err = generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
	if err != nil {
		return newStatus, err
	}
	a.storeResourceVersion(obj)
	return newStatus, nil
}

// isNewResourceVersion detects if a specific resource version was already successfully processed.
// Only used if UniqueApplyForResourceVersion is set in generic.GeneratingHandlerOptions
func (a *userGeneratingHandler) isNewResourceVersion(obj *v1alpha1.User) bool {
	if !a.opts.UniqueApplyForResourceVersion {
		return true
	}

	// Apply once per resource version
	key := obj.Namespace + "/" + obj.Name
	previous, ok := a.seen.Load(key)
	return !ok || previous != obj.ResourceVersion
}

// storeResourceVersion keeps track of the latest resource version of an object for which Apply was executed
// Only used if UniqueApplyForResourceVersion is set in generic.GeneratingHandlerOptions
func (a *userGeneratingHandler) storeResourceVersion(obj *v1alpha1.User) {
	if !a.opts.UniqueApplyForResourceVersion {
		return
	}

	key := obj.Namespace + "/" + obj.Name
	a.seen.Store(key, obj.ResourceVersion)
}
